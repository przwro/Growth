@using Growth.Application.Common.Extensions;
@using Growth.Application.Users.Commands.AddUser;
@model AddUserCommand

@{
	ViewData["Title"] = "Dodawanie nowego usera";
}

<div class="card card-primary card-border-top">

	@using (Html.BeginForm("AddUser", "User"))
	{
		@Html.AntiForgeryToken()

		<div class="card-body">

			<div class="form-group">
				@Html.LabelFor(x => x.FirstName)
				@Html.TextBoxFor(x => x.FirstName, new { @class = "form-control", placeholder = $"Wprowadź {ModelExtensions.GetDisplayName<AddUserCommand>(p => p.FirstName).ToLower()}" })
				@Html.ValidationMessageFor(x => x.FirstName)
			</div>

			<div class="form-group">
				@Html.LabelFor(x => x.LastName)
				@Html.TextBoxFor(x => x.LastName, new { @class = "form-control", placeholder = $"Wprowadź {ModelExtensions.GetDisplayName<AddUserCommand>(p => p.LastName).ToLower()}" })
				@Html.ValidationMessageFor(x => x.LastName)
			</div>

			<div class="form-group">
				@Html.LabelFor(x => x.Address.Street)
				@Html.TextBoxFor(x => x.Address.Street, new { @class = "form-control", placeholder = $"Wprowadź {ModelExtensions.GetDisplayName<AddUserCommand>(p => p.Address.Street).ToLower()}" })
				@Html.ValidationMessageFor(x => x.Address.Street)
			</div>

		</div>

		<div class="card-footer">

			<button type="submit" class="btn btn-primary btn-lg">
				<i class="fa-solid fa-circle-check"></i>Zapisz
			</button>

		</div>
	}

</div>

@section Scripts {

	<partial name="Scripts/_ValidationScriptsPartial" />

}